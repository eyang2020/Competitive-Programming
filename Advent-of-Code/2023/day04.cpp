#include <bits/stdc++.h>
    
using namespace std;
    
typedef long long ll;
typedef long double ld;
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);

const int N = 1e5;
const ll MOD = 1e9 + 7;
const int INF = 1e9;

const int dx[4] = {0, 1, 0, -1};
const int dy[4] = {1, 0, -1, 0};

const int dxWithDiag[8] = {0, 1, 0, -1, 1, -1, 1, -1};
const int dyWithDiag[8] = {1, 0, -1, 0, -1, 1, 1, -1};

ll modpow(ll x, ll y) {
    ll res = 1;
    x %= MOD;
    if(x == 0) return 0;
    while(y > 0) {
        if(y & 1) {
            res = (res * x) % MOD;
        }
        y >>= 1;
        x = (x * x) % MOD;
    }
    return res;
}

vector<string> tokenize(string s, string delim) {
    vector<string> tokens;
    int idx = 0, n = delim.length();
    string token;
    while((idx = s.find(delim)) != string::npos) {
        token = s.substr(0, idx);
        tokens.push_back(token);
        s.erase(0, idx + n);
    }
    tokens.push_back(s);
    return tokens;
}

int countMatches(vector<string> a, vector<string> b) {
    map<string, int> mp;
    int cnt = 0;
    for(string x : b) {
        if(x.length() > 0) mp[x]++;
    }
    for(string x : a) {
        if(x.length() > 0 && mp[x] > 0) cnt++;
    }
    return cnt;
}

void part1(vector<string> lines) {
    int res = 0;
    for(string s : lines) {
        s = tokenize(s, ": ")[1];
        vector<string> v = tokenize(s, " | ");
        vector<string> a = tokenize(v[0], " ");
        vector<string> b = tokenize(v[1], " ");
        map<string, int> mp;
        int matches = countMatches(a, b);
        if(matches > 0) res += 1 << (matches - 1);
    }
    cout << res << endl;
}

void part2(vector<string> lines) {
    int n = lines.size(), res = n;
    vector<int> dp(n); // let dp[i] represent the total number of cards generated by card i, not including itself
    for(int i=n-2;i>=0;i--) {
        string s = tokenize(lines[i], ": ")[1];
        vector<string> v = tokenize(s, " | ");
        vector<string> a = tokenize(v[0], " ");
        vector<string> b = tokenize(v[1], " ");
        int matches = countMatches(a, b);
        dp[i] = matches;
        for(int j=1;j<=matches;j++) {
            dp[i] += dp[i+j];
        }
    }
    for(int i=0;i<n;i++) {
        res += dp[i];
    }
    cout << res << endl;
}

int main() {
    IOS
    string s;
    vector<string> lines;
    while(getline(cin, s)) {
        lines.push_back(s);
    }
    part1(lines);
    part2(lines);
    return 0;
}
